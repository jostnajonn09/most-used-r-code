#################general base r code#########################
#checking for a package if it's installed or not ,and installing it if it's not installed
#first method
if(!"gridExtra" %in% rownames(installed.packages())){
  install.packages(gridExtra)
  }
#There are many ways to load libraries in R. I found pacman approach quite useful compared to others. 
#Specifically, p_load function loads the library if package is already installed. 
#If specified package is not installed then p_load function will install it and then load it.

if (!require("pacman")) install.packages("pacman")
pacman::p_load(knitr, tidyverse, highcharter, data.table, lubridate, pROC, tictoc, DescTools, lightgbm)


#loading the a list of packages using library function with sapply
sapply(c("highcharter","zoo","ggplot2","gridExtra","ggExtra"), library, character.only = T, logical.return = T, quietly = T, warn.conflicts = F)

#to create an empty dataframe with same columns as another data frame but zero observations
dataframe_empty<-df[0,] #where df is the data frame which we want to copy 
#or you can use this
#creating an empty dataframe df with same column names and rows as other datframe DF
df <- data.frame(matrix(ncol = 3, nrow = 0))
x <- colnames(DF)
colnames(df) <- x
#to check if a dataframe is grouped by another variable
is.grouped_df(df)#will return true if it'sgrouped by else false

#unique values by each feature in a dataframe as a table can be given as
kable(as.data.frame(lapply(dataframe, function(x)length(unique(x)))))


#listing all the numeric variables in dataframe DF
numvar<-sapply(DF,is.numeric) %>% unlist %>% which()
colnames(DF[,numvar])

#listing all the character and factor type variables in dataframe DF
chavar<-sapply(DF,is.character) %>% unlist %>% which()
colnames(DF[,chavar])

#to know the frequencies of a vector or combination of vectors together use table function
table(vector)
#to know the proportions in a matrix use prop.table function or use prop.table(table(x)
prop.table(table(x)
#to convert the o/p of a table function to dataframe as it is ,with row names included as a seperate column
a<-table(df$i,df$j) %>%  as.data.frame.matrix() 
a<-setDT(a, keep.rownames = TRUE)[]
a<-cbind(a[,1],apply(a[,-1],1,sum)) %>% arrange(desc(V2))

#greedy string matching using .* reguler expression
c<-"  Borrower added on 12/22/11 > I need to upgrade my business technologies.<br>"
sub("^.*>","",c) #This code matches till the last ">" symbol
#to make this matching non greedy use ? after .*"in reguler expression that is .*?
sub("^.*?>","",c) #This code matches only till the first ">" symbol
#extract a particular part from a string in r

#checking for numeric variables in a dataframe
numvar<-sapply(dataframe,is.numeric) %>% unlist %>% which()
colnames(dataframe[,numvar])

#scaling all the numeric variables dataset
data_digit<-scale(data_digit)
#checking if it is done correctly from the following code
colMeans(data_digit)  # faster version of apply(scaled.dat, 2, mean)
apply(data_digit, 2, sd)



##Removing all columns which have  only missing values(NA's) in dataframe DF

check_na<-function(x){
  if (length(unique(x))==1 & is.na(unique(x))){
    x<-NULL
    return(NULL)
    
  }else{
    return(x)
  }
} 

for (i in colnames(DF)){
  DF[,i]<- DF[,i] %>%  check_na 
}


###########################ggplot#################################################
##to change the angle of labels on x axis
theme(axis.text.x = element_text(angle = 90, hjust = 1))




